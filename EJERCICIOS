sLARIO DE FUNCIONARIOS CON LIMITES DE FAXAS DE RENTE, ALIQUOTAS...

#include <iostream>

using namespace std;

int main() {
    const double faixas[] = {1903.98, 2826.65, 3751.05, 4664.68}; // Limites de las faxas de renta
    const double aliquotas[] = {0.0, 0.075, 0.15, 0.225, 0.275}; // Aliquotas correspondentes

    int funcionarios[5] = {0}; // Array para almacenar el conteo de funcionários en cada faixa

    double salario;
    while (true) {
        printf("Digite o salário do funcionário (1 para parar): ");
        scanf("%le", &salario);

        if (salario == 1)
            break;

        // Verificar en cual faixa o salario se encuentra
        int faixa = 0;
        while (faixa < 4 && salario > faixas[faixa + 1])
            faixa++;

        funcionarios[faixa]++; 
    }
    printf("\nNúmero de funcionários em cada faixa do Imposto de Renda:\n");
    
    for (int i = 0; i < 5; i++) {
        if (i == 0)
            printf("Até R$ %f: %d funcionário(s)\n", faixas[i], funcionarios[i]);
        else if (i == 4)
            printf("Acima de R$ %f: %d funcionário(s)\n", faixas[i - 1], funcionarios[i]);
        else
            printf("De R$ %f a R$ %f: %d funcionário(s)\n", faixas[i - 1], faixas[i], funcionarios[i]);
    }

    return 0;
}





JUEGO DE LA VELHA.

#include <iostream>
using namespace std;
// Función para imprimir el tablero de juego
void imprimirTablero(char tablero[3][3]) {
    printf("Tablero de juego:\n");
 
        for(int r = 0 ; r <3 ; r ++){
        printf(" %c | ", (tablero [r][0]));
        printf(" %c | ", (tablero [r][1]));
        printf(" %c \n",(tablero [r][2]));

        if(r!=2){
            printf("___ ___ ___\n");
        }
        }
    }


// Función para verificar si hay un ganador
char verificarGanador(char tablero[3][3]) {
    // Verificar filas
    for (int i = 0; i < 3; i++) {
        if (tablero[i][0] != ' ' && tablero[i][0] == tablero[i][1] && tablero[i][1] == tablero[i][2]) {
            return tablero[i][0];
        }
    }

    // Verificar columnas
    for (int j = 0; j < 3; j++) {
        if (tablero[0][j] != ' ' && tablero[0][j] == tablero[1][j] && tablero[1][j] == tablero[2][j]) {
            return tablero[0][j];
        }
    }

    // Verificar diagonales
    if (tablero[0][0] != ' ' && tablero[0][0] == tablero[1][1] && tablero[1][1] == tablero[2][2]) {
        return tablero[0][0];
    }
    if (tablero[0][2] != ' ' && tablero[0][2] == tablero[1][1] && tablero[1][1] == tablero[2][0]) {
        return tablero[0][2];
    }

    // No hay ganador
    return ' ';
}

int main() {
    char tablero[3][3] = { { ' ', ' ', ' ' },
                           { ' ', ' ', ' ' },
                           { ' ', ' ', ' ' } };
    char jugadorActual = 'X';
    int fila, columna;

    while (true) {
        imprimirTablero(tablero);

        // Solicitar la posición del jugador actual
        printf("Jugador %c, ingrese la fila (0-2): ", jugadorActual);
        scanf("%d", &fila);
        printf("Jugador %c, ingrese la columna (0-2): ", jugadorActual);
        scanf("%d", &columna);

        // Verificar si la posición es válida
        if (fila < 0 || fila > 2 || columna < 0 || columna > 2 || tablero[fila][columna] != ' ') {
            printf("Posición inválida. Inténtelo de nuevo.\n");
            continue;
        }

        // Actualizar el tablero con la jugada del jugador actual
        tablero[fila][columna] = jugadorActual;

        // Verificar si hay un ganador
        char ganador = verificarGanador(tablero);
        if (ganador != ' ') {
            imprimirTablero(tablero);
            printf("¡El jugador %c ha ganado el juego!\n", ganador);
            break;
        }

        // Verificar si hay un empate (tablero lleno)
        bool empate = true;
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (tablero[i][j] == ' ') {
                    empate = false;
                    break;
                }
            }
            if (!empate) {
                break;
            }
        }
        if (empate) {
            imprimirTablero(tablero);
            printf("¡Empate! No hay más movimientos posibles.\n");
            break;
        }

        // Cambiar al siguiente jugador
        jugadorActual = (jugadorActual == 'X') ? 'O' : 'X';
    }

    return 0;
}


/******************************************************************************
Utilizando matrizes, crie uma função para leitura.
Uma funçao para calcular a média. 
Uma funçao para imprimir as bordas da matriz.
*******************************************************************************/
#include <iostream>
#include <vector>

using namespace std;

// Função para leitura de uma matriz
vector<vector<int>> ler_matriz() {
    int linhas, colunas;
    cout << "Digite o número de linhas da matriz: ";
    cin >> linhas;
    cout << "Digite o número de colunas da matriz: ";
    cin >> colunas;
    
    vector<vector<int>> matriz(linhas, vector<int>(colunas));
    
    for (int i = 0; i < linhas; i++) {
        for (int j = 0; j < colunas; j++) {
            cout << "Digite o elemento da posição (" << i << ", " << j << "): ";
            cin >> matriz[i][j];
        }
    }
    
    return matriz;
}

// Função para calcular a média dos elementos de uma matriz
double calcular_media(const vector<vector<int>>& matriz) {
    int total_elementos = 0;
    int soma_elementos = 0;
    
    for (const auto& linha : matriz) {
        for (int elemento : linha) {
            soma_elementos += elemento;
            total_elementos++;
        }
    }
    
    if (total_elementos > 0) {
        double media = static_cast<double>(soma_elementos) / total_elementos;
        return media;
    } else {
        return 0;
    }
}

// Função para imprimir as bordas de uma matriz
void imprimir_bordas(const vector<vector<int>>& matriz) {
    int linhas = matriz.size();
    int colunas = matriz[0].size();
    
    for (int i = 0; i < linhas; i++) {
        for (int j = 0; j < colunas; j++) {
            if (i == 0 || i == linhas - 1 || j == 0 || j == colunas - 1) {
                cout << matriz[i][j] << " ";
            } else {
                cout << "  ";
            }
        }
        cout << endl;
    }
}

int main() {
    // Exemplo de uso
    vector<vector<int>> minha_matriz = ler_matriz();
    double media = calcular_media(minha_matriz);
    imprimir_bordas(minha_matriz);
    
    return 0;
}


/******************************************************************************
 LEE FUNCIONARIOS Y CARGOS, SI NO ENCEUNTRA NADA, AVISA. FUNCIÓN Y RECOÍLACIÓN DE DATOS. 
 
*******************************************************************************/
#include <bits/stdc++.h>
#define TAM 3
using namespace std;

typedef struct funcionario {
    string nome;
    int codigo;
    int cargo;
} func;
func dados[TAM];
void recursivo(int i, string busca){
    if(busca.compare(dados[i].nome)==0){
        printf("Achou o nome %s com o codigo %d\n", dados[i].nome.c_str(), dados[i].codigo);
    }else if (i<TAM){
        i++;
        recursivo(i, busca);
    }else{
        printf("Não achou \n");
    }
}
void pesquisa(string busca){
    int achou =0;
    for(int i=0; i<TAM; i++){
        if(busca.compare(dados[i].nome)==0){
            printf("Achou o nome %s com o código %d e cargo %d\n", dados[i].nome.c_str(), dados[i].codigo, dados[i].cargo);
            achou =1;
        }
    }
    if(achou ==0){
        printf("Nada encontrado\n");
    }
}
int main(){
    int i=0;
    for (i=0; i<TAM; i++){
        getline(cin, dados[i].nome, '\n' ); //Entrada de dados do teclado.
        printf("Digite o codigo: ");
        scanf("%d", &dados[i].codigo); //Entrada de dados do teclado.
        printf("Digite o cargo: "); //Entrada de dados do teclado.
        scanf("%d", &dados[i].cargo);//Entrada de dados do teclado.
        printf("funcionario %s, código %d e cargo %d\n", dados[i].nome.c_str(), dados[i].codigo, dados[i].cargo);
        cin.ignore();
        
    }
   string busca;
   printf("Digite o nome a ser pesquisado: ");
   getline(cin, busca, '\n');
   recursivo(0, busca);
   pesquisa(busca);
   return 0; 
}



/******************************************************************************
FALTA COMPLETAR.
Faça um algoritmo que use vetores
Tenha uma funçao de leitura que receba como parametro o vetor por ponteiro.
leia todos os valores
Outra funçao de impressã que imprima todos os valores.
*******************************************************************************/
#include <iostream>

using namespace std;

void letVetor(int * vetor, int tamano){
    for (int i = 0; i < tamano; i ++){
        printf("Digite o valor do valor %d: ", i);
        scanf("%d", vetor[i]);
    }
}
void impVetor(const int* vetor, int tamano){
    printf("Valores do vetor");
    for (int i = 0; i < tamano; i ++){
        printf("%d", vetor[i]);
    }
    printf("\n");
}

int main()
{
    int tamano;
    printf("Digite o tamaho do vetor: ");
    scanf("%d", &tamano);
    
    int*vetor=new int[tamano];
    
    letVetor(vetor, tamano);
    impVetor(vetor, tamano);
    
    delete[] vetor;

    return 0;
}



/******************************************************************************
Faça um algoritmo que use vetores
Tenha uma funçao de leitura que receba como parametro o vetor por ponteiro.
leia todos os valores
Outra funçao de impressã que imprima todos os valores.
*******************************************************************************/
#include <iostream>

using namespace std;

void letVetor(int * vetor, int tamano){
    for (int i = 0; i < tamano; i ++){
        printf("Digite o valor do valor %d: ", i);
        scanf("%d", vetor);
        vetor++;
    }
}
void impVetor(const int* vetor, int tamano){
    printf("Valores do vetor");
    for (int i = 0; i < tamano; i ++){
        printf("%d", *vetor);
        vetor++;
    }
    printf("\n");
}

int main()
{
    int tamano;
    printf("Digite o tamaho do vetor: ");
    scanf("%d", &tamano);
    
    int*vetor=new int[tamano];
    
    letVetor(vetor, tamano);
    impVetor(vetor, tamano);


    return 0;
}
