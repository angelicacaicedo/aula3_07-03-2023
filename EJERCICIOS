sLARIO DE FUNCIONARIOS CON LIMITES DE FAXAS DE RENTE, ALIQUOTAS...

#include <iostream>

using namespace std;

int main() {
    const double faixas[] = {1903.98, 2826.65, 3751.05, 4664.68}; // Limites de las faxas de renta
    const double aliquotas[] = {0.0, 0.075, 0.15, 0.225, 0.275}; // Aliquotas correspondentes

    int funcionarios[5] = {0}; // Array para almacenar el conteo de funcionários en cada faixa

    double salario;
    while (true) {
        printf("Digite o salário do funcionário (1 para parar): ");
        scanf("%le", &salario);

        if (salario == 1)
            break;

        // Verificar en cual faixa o salario se encuentra
        int faixa = 0;
        while (faixa < 4 && salario > faixas[faixa + 1])
            faixa++;

        funcionarios[faixa]++; 
    }



JUEGO DE LA VELHA.

#include <iostream>

// Função para imprimir o tabuleiro
void imprimirTabuleiro(char tabuleiro[3][3]) {
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            std::cout << tabuleiro[i][j] << " ";
        }
        std::cout << std::endl;
    }
}

// Função para verificar se há um vencedor
char verificarVencedor(char tabuleiro[3][3]) {
    // Verificar linhas
    for (int i = 0; i < 3; i++) {
        if (tabuleiro[i][0] != ' ' && tabuleiro[i][0] == tabuleiro[i][1] && tabuleiro[i][1] == tabuleiro[i][2]) {
            return tabuleiro[i][0];
        }
    }

    // Verificar colunas
    for (int j = 0; j < 3; j++) {
        if (tabuleiro[0][j] != ' ' && tabuleiro[0][j] == tabuleiro[1][j] && tabuleiro[1][j] == tabuleiro[2][j]) {
            return tabuleiro[0][j];
        }
    }

    // Verificar diagonais
    if (tabuleiro[0][0] != ' ' && tabuleiro[0][0] == tabuleiro[1][1] && tabuleiro[1][1] == tabuleiro[2][2]) {
        return tabuleiro[0][0];
    }
    if (tabuleiro[0][2] != ' ' && tabuleiro[0][2] == tabuleiro[1][1] && tabuleiro[1][1] == tabuleiro[2][0]) {
        return tabuleiro[0][2];
    }

    // Não há um vencedor
    return ' ';
}

int main() {
    char tabuleiro[3][3] = { { ' ', ' ', ' ' },
                             { ' ', ' ', ' ' },
                             { ' ', ' ', ' ' } };
    char jogadorAtual = 'X';
    int linha, coluna;

    while (true) {
        imprimirTabuleiro(tabuleiro);

        // Solicitar a posição do jogador atual
        std::cout << "Jogador " << jogadorAtual << ", digite a linha (0-2): ";
        std::cin >> linha;
        std::cout << "Jogador " << jogadorAtual << ", digite a coluna (0-2): ";
        std::cin >> coluna;

        // Verificar se a posição é válida
        if (linha < 0 || linha > 2 || coluna < 0 || coluna > 2 || tabuleiro[linha][coluna] != ' ') {
            std::cout << "Posição inválida. Tente novamente.\n";
            continue;
        }

        // Atualizar o tabuleiro com a jogada do jogador atual
        tabuleiro[linha][coluna] = jogadorAtual;

        // Verificar se há um vencedor
        char vencedor = verificarVencedor(tabuleiro);
        if (vencedor != ' ') {
            imprimirTabuleiro(tabuleiro);
            std::cout << "O jogador " << vencedor << " venceu o jogo!\n";
            break;
        }

        // Trocar de jogador
        jogadorAtual = (jogadorAtual == 'X') ? 'O' : 'X';
    }

    return 0;
}

    printf("\nNúmero de funcionários em cada faixa do Imposto de Renda:\n");
    
    for (int i = 0; i < 5; i++) {
        if (i == 0)
            printf("Até R$ %f: %d funcionário(s)\n", faixas[i], funcionarios[i]);
        else if (i == 4)
            printf("Acima de R$ %f: %d funcionário(s)\n", faixas[i - 1], funcionarios[i]);
        else
            printf("De R$ %f a R$ %f: %d funcionário(s)\n", faixas[i - 1], faixas[i], funcionarios[i]);
    }

    return 0;
}
